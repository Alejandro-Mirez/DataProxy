# coding: utf-8

"""
    Coffee Freaks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1-178-83b5c11-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CoffeeResultWithRoaster(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "grammage",
            "speciality",
            "created",
            "kind",
            "name",
            "id",
            "updated",
            "roaster",
        }
        
        class properties:
            id = schemas.UUIDSchema
        
            @staticmethod
            def roaster() -> typing.Type['RoasterResult']:
                return RoasterResult
            name = schemas.StrSchema
        
            @staticmethod
            def grammage() -> typing.Type['Grammage']:
                return Grammage
        
            @staticmethod
            def kind() -> typing.Type['CoffeeKind']:
                return CoffeeKind
            speciality = schemas.BoolSchema
            created = schemas.StrSchema
            updated = schemas.StrSchema
            
            
            class origin(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'origin':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class beans(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Beans']:
                        return Beans
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Beans'], typing.List['Beans']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'beans':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Beans':
                    return super().__getitem__(i)
            
            
            class processing(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Processing']:
                        return Processing
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Processing'], typing.List['Processing']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'processing':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Processing':
                    return super().__getitem__(i)
            roastingLevel = schemas.Int32Schema
            
            
            class dedicated(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BrewingMethod']:
                        return BrewingMethod
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['BrewingMethod'], typing.List['BrewingMethod']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dedicated':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BrewingMethod':
                    return super().__getitem__(i)
            description = schemas.StrSchema
            
            
            class roastingDates(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.DateSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, date, ]], typing.List[typing.Union[MetaOapg.items, str, date, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'roastingDates':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "id": id,
                "roaster": roaster,
                "name": name,
                "grammage": grammage,
                "kind": kind,
                "speciality": speciality,
                "created": created,
                "updated": updated,
                "origin": origin,
                "beans": beans,
                "processing": processing,
                "roastingLevel": roastingLevel,
                "dedicated": dedicated,
                "description": description,
                "roastingDates": roastingDates,
            }
    
    grammage: 'Grammage'
    speciality: MetaOapg.properties.speciality
    created: MetaOapg.properties.created
    kind: 'CoffeeKind'
    name: MetaOapg.properties.name
    id: MetaOapg.properties.id
    updated: MetaOapg.properties.updated
    roaster: 'RoasterResult'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roaster"]) -> 'RoasterResult': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grammage"]) -> 'Grammage': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> 'CoffeeKind': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speciality"]) -> MetaOapg.properties.speciality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origin"]) -> MetaOapg.properties.origin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beans"]) -> MetaOapg.properties.beans: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["processing"]) -> MetaOapg.properties.processing: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roastingLevel"]) -> MetaOapg.properties.roastingLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dedicated"]) -> MetaOapg.properties.dedicated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roastingDates"]) -> MetaOapg.properties.roastingDates: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "roaster", "name", "grammage", "kind", "speciality", "created", "updated", "origin", "beans", "processing", "roastingLevel", "dedicated", "description", "roastingDates", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roaster"]) -> 'RoasterResult': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grammage"]) -> 'Grammage': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> 'CoffeeKind': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speciality"]) -> MetaOapg.properties.speciality: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origin"]) -> typing.Union[MetaOapg.properties.origin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beans"]) -> typing.Union[MetaOapg.properties.beans, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["processing"]) -> typing.Union[MetaOapg.properties.processing, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roastingLevel"]) -> typing.Union[MetaOapg.properties.roastingLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dedicated"]) -> typing.Union[MetaOapg.properties.dedicated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roastingDates"]) -> typing.Union[MetaOapg.properties.roastingDates, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "roaster", "name", "grammage", "kind", "speciality", "created", "updated", "origin", "beans", "processing", "roastingLevel", "dedicated", "description", "roastingDates", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        grammage: 'Grammage',
        speciality: typing.Union[MetaOapg.properties.speciality, bool, ],
        created: typing.Union[MetaOapg.properties.created, str, ],
        kind: 'CoffeeKind',
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, uuid.UUID, ],
        updated: typing.Union[MetaOapg.properties.updated, str, ],
        roaster: 'RoasterResult',
        origin: typing.Union[MetaOapg.properties.origin, list, tuple, schemas.Unset] = schemas.unset,
        beans: typing.Union[MetaOapg.properties.beans, list, tuple, schemas.Unset] = schemas.unset,
        processing: typing.Union[MetaOapg.properties.processing, list, tuple, schemas.Unset] = schemas.unset,
        roastingLevel: typing.Union[MetaOapg.properties.roastingLevel, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        dedicated: typing.Union[MetaOapg.properties.dedicated, list, tuple, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        roastingDates: typing.Union[MetaOapg.properties.roastingDates, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CoffeeResultWithRoaster':
        return super().__new__(
            cls,
            *args,
            grammage=grammage,
            speciality=speciality,
            created=created,
            kind=kind,
            name=name,
            id=id,
            updated=updated,
            roaster=roaster,
            origin=origin,
            beans=beans,
            processing=processing,
            roastingLevel=roastingLevel,
            dedicated=dedicated,
            description=description,
            roastingDates=roastingDates,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.beans import Beans
from openapi_client.model.brewing_method import BrewingMethod
from openapi_client.model.coffee_kind import CoffeeKind
from openapi_client.model.grammage import Grammage
from openapi_client.model.processing import Processing
from openapi_client.model.roaster_result import RoasterResult
