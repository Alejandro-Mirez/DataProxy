# coding: utf-8

"""
    Coffee Freaks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.0.1-178-83b5c11-SNAPSHOT
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class GetRoasterCoffeeParameters(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Parameters used in query
    """


    class MetaOapg:
        required = {
            "offset",
            "limit",
        }
        
        class properties:
            limit = schemas.Int32Schema
            offset = schemas.Int32Schema
        
            @staticmethod
            def kind() -> typing.Type['CoffeeKind']:
                return CoffeeKind
        
            @staticmethod
            def created() -> typing.Type['DataOrdering']:
                return DataOrdering
        
            @staticmethod
            def updated() -> typing.Type['DataOrdering']:
                return DataOrdering
            __annotations__ = {
                "limit": limit,
                "offset": offset,
                "kind": kind,
                "created": created,
                "updated": updated,
            }
    
    offset: MetaOapg.properties.offset
    limit: MetaOapg.properties.limit
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limit"]) -> MetaOapg.properties.limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offset"]) -> MetaOapg.properties.offset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> 'CoffeeKind': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> 'DataOrdering': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> 'DataOrdering': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["limit", "offset", "kind", "created", "updated", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limit"]) -> MetaOapg.properties.limit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offset"]) -> MetaOapg.properties.offset: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> typing.Union['CoffeeKind', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union['DataOrdering', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> typing.Union['DataOrdering', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["limit", "offset", "kind", "created", "updated", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        offset: typing.Union[MetaOapg.properties.offset, decimal.Decimal, int, ],
        limit: typing.Union[MetaOapg.properties.limit, decimal.Decimal, int, ],
        kind: typing.Union['CoffeeKind', schemas.Unset] = schemas.unset,
        created: typing.Union['DataOrdering', schemas.Unset] = schemas.unset,
        updated: typing.Union['DataOrdering', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GetRoasterCoffeeParameters':
        return super().__new__(
            cls,
            *args,
            offset=offset,
            limit=limit,
            kind=kind,
            created=created,
            updated=updated,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.coffee_kind import CoffeeKind
from openapi_client.model.data_ordering import DataOrdering
